basePath: /simple-chat/api
consumes:
- application/json
definitions:
  errors.ChatNotFound404:
    description: ошибка ненахождения чата с таким uuid в БД
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          getChat: chat with such id was not found
        type: object
      path:
        example: /api/chat/:id
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 404
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.ChatUserIsNotParticipant403:
    description: ошибка, возникающая при запросе юзером чата, в котором он не состоит
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          getChat: forbidden
        type: object
      path:
        example: /api/chat/:id
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 409
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.ChatWithSameUser400:
    description: ошибка, возникающая при указании второго участника чата как себя
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          chatWith: another chat participant cannot be the same user
        type: object
      path:
        example: /api/chat/with/:username
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 400
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.GeneralExpiredCredentials401:
    description: ошибка отсутствия куков (истёк токен и соответственно куки авторизации
      вместе с ним)
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          token: missing auth cookie
        type: object
      path:
        example: /api/chat/check
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 401
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.GeneralInternalError500:
    description: обычная пятисотка от сервера, которую никто не ждёт
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          unknown: some error desc
        type: object
      path:
        example: /api/some/shit
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 500
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.GeneralUserNotFound404:
    description: ошибка ненахождения юзера с таким логином в БД
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          getUser: user with such username was not found
        type: object
      path:
        example: /api/user/login
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 404
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.GeneralValidateError400:
    description: ошибка валидации входных данных
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          username: username field must not be blank
        type: object
      path:
        example: /api/user/login
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 400
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.UserLoginInvalidPassword401:
    description: ошибка неверного пароля
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          password: invalid password
        type: object
      path:
        example: /api/user/login
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 401
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  errors.UserRegusterAlreadyExistsError409:
    description: ошибка регистрации юзера с уже существующим (занятым) логином
    properties:
      errors:
        additionalProperties:
          type: string
        example:
          username: user with such username already exists
        type: object
      path:
        example: /api/user/register
        type: string
      status:
        example: error
        type: string
      statusCode:
        example: 409
        type: integer
      timestamp:
        example: 24-11-11 11:57:28 +03
        type: string
    type: object
  models.Chat:
    properties:
      id:
        description: uuid чата
        example: 0aafe1fd-0088-455b-9269-0307aae15bcc
        type: string
      messages:
        description: сообщения чата
        items:
          $ref: '#/definitions/models.Message'
        type: array
      users:
        description: участники чата
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Message:
    properties:
      chatId:
        description: id чата
        type: string
      content:
        description: текст сообщения
        example: sample message
        type: string
      createdAt:
        description: время создания сообщения
        example: "2024-11-13T12:34:56Z"
        type: string
      sender:
        allOf:
        - $ref: '#/definitions/models.User'
        description: отправитель сообщения
    type: object
  models.User:
    description: выходные данные входа и регистрации юзера
    properties:
      id:
        description: uuid юзера
        example: e2f53f31-0598-4e36-b25d-41bd665764d1
        type: string
      username:
        description: логин юзера
        example: vasya_2007
        type: string
    type: object
  serializers.LoginUserIn:
    description: входные данные для входа юзера
    properties:
      password:
        description: пароль юзера
        example: qwerty123
        type: string
      username:
        description: логин юзера
        example: vasya_2007
        type: string
    type: object
  serializers.RegisterUserIn:
    description: входные данные регистрации юзера
    properties:
      password:
        description: пароль юзера
        example: qwerty123
        maxLength: 50
        minLength: 8
        type: string
      username:
        description: логин юзера
        example: vasya_2007
        maxLength: 50
        type: string
    type: object
  serializers.WithOut:
    description: выходные данные получения id чата для двух юзеров
    properties:
      id:
        description: uuid чата
        example: 0aafe1fd-0088-455b-9269-0307aae15bcc
        type: string
    type: object
host: fredcv.ru:8091
info:
  contact: {}
  description: This is a SimpleChat API written on Golang using Echo and Gorilla WebSocket.
  title: SimpleChat Go API
  version: "1.0"
paths:
  /chat/{id}:
    get:
      consumes:
      - text/plain
      description: Get chat messages and chat participants by chat uuid in path parameters
      operationId: get-chat
      parameters:
      - description: Chat uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.GeneralExpiredCredentials401'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ChatUserIsNotParticipant403'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ChatNotFound404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.GeneralInternalError500'
      summary: Get chat
      tags:
      - chat
  /chat/with/{username}:
    get:
      consumes:
      - text/plain
      description: Get chat id by username of another chat participant in path parameters
      operationId: chat-with
      parameters:
      - description: Chat participant username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.WithOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ChatWithSameUser400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.GeneralExpiredCredentials401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.GeneralUserNotFound404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.GeneralInternalError500'
      summary: Get chat id
      tags:
      - chat
  /user/login:
    post:
      consumes:
      - application/json
      description: Login existing user by email and password
      operationId: user-login
      parameters:
      - description: Login params
        in: body
        name: LoginUserIn
        required: true
        schema:
          $ref: '#/definitions/serializers.LoginUserIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.GeneralValidateError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.UserLoginInvalidPassword401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.GeneralUserNotFound404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.GeneralInternalError500'
      summary: Login user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Register new user with form
      operationId: user-register
      parameters:
      - description: Register params
        in: body
        name: RegisterUserIn
        required: true
        schema:
          $ref: '#/definitions/serializers.RegisterUserIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.GeneralValidateError400'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.UserRegusterAlreadyExistsError409'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.GeneralInternalError500'
      summary: Register user
      tags:
      - user
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  CookieAuth:
    description: JWT security token. Cookie is automatic added after auth is done
      (login/register).
    in: cookie
    name: simple-chat-auth
    type: apiKey
swagger: "2.0"
